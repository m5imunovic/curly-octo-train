from pathlib import Path

from icontract import require
from typeguard import typechecked


@require(lambda mult_info_path: mult_info_path.exists(), error=FileNotFoundError, description="Path does not exist.")
@typechecked
def parse_mult_info(mult_info_path: Path) -> dict:
    """Parse multiplicity info which is a file mapping from edge IDs to int multiplicities (true coverage)

    Args:
        mult_info_path (Path): File containing multiplicies

    Returns:
        dict: Parsed multiplicity info (str -> int)
    """
    mult_info = {}
    with open(mult_info_path) as handle:
        for line in handle:
            name, multiplicity = line.strip().split()
            mult_info[name] = round(float(multiplicity))

    return mult_info


@typechecked
def partition_mult_info_edges(mult_info: dict[str, int]) -> tuple[set, set]:
    """Split edges into correct and incorrect based on multiplicity. Multiplicity greater than 0 means that the edge is
    real and erroneous otherwise.

    Args:
        mult_info (dict[str, int]): multiplicity dict (as generated by parse_mult_info)

    Returns:
        tuple[set, set]: partitions with correct/incorrect edges
    """
    incorrect_edges = set()
    correct_edges = {key for key, value in mult_info.items() if value > 0 or incorrect_edges.add(key)}

    return correct_edges, incorrect_edges
