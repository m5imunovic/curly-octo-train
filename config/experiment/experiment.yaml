scenario:
  name: random_scenario #  can be with or without .json

experiment_id: ${now:%y%m%d_%H%M%S}
max_workers: 1
timeout_in_minutes: 120

# here we define the available profiles for simulation
# this way we can verify that the scenario uses right setting
profiles:
  val: #
  test: #
  train: #

keep:
  artifacts_path: "eval"
  # either matches as fnmatch.fnmatch(path, pattern) or pathlib.Path(path).name == pattern
  reads: ["*.fastq"]
  assemblies: ["mult.info", "full_asm.json", "graph.gfa", "graph.dot"]
  graph: ["*.idmap", "*.hashmap"]
