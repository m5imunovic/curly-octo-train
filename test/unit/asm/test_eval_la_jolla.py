from asm.eval_la_jolla import parse_alignments_entry


def alignment_entry():
    entry = (
        ">S1_4\n"
        "412919857249062717843322281184075888261T -1987231515899329249692347480942183202460G -1561711885499016301224706076976483862850C -390679943701401129839732758686650489560G 390679943701401129839732758686650489561C 729703143703240761413923518984911727931A 1748172726706564366960688137655025092941G -367139011828870769723754551879896475891A 367139011828870769723754551879896475890T 628249835483875466562137306070801082130G -610608691532151974483611578426544478430A -225578893556013662487828396444276757540G -78692546314076078552358651687005968100G 78692546314076078552358651687005968101T -1040797048936058779812723597776863812720G 1040797048936058779812723597776863812721A -1178806371616721053972149437983625605630G 1178806371616721053972149437983625605631A -582943369367008063922268597641937366001C 582943369367008063922268597641937366000C -141550578869985687418811618355892300040A 141550578869985687418811618355892300041A -756829566572818997915342649893432840780C -340664507554937887315157101199525399141T 340664507554937887315157101199525399140A -832913534421222959426489483121722899971G 832913534421222959426489483121722899970A 1814741323286925010111667465134334284741G -598251744078717651483652700087141391841G 598251744078717651483652700087141391840A -1363111763421042196522669939229805231450G 1363111763421042196522669939229805231451C -1440341320198849096868334172688751663051G -901563975053883358279626130542079914631G 901563975053883358279626130542079914630C -123311243029038565196662379437422160501C 123311243029038565196662379437422160500G 1263021838585743020124603835596312692061G 1899486197162063783042042284501405133260A -391944688285878764350251453695811976240G 391944688285878764350251453695811976241C -1700496720269845212134535210304867992280C -387005632673047559699588929940398024311T 387005632673047559699588929940398024310G -1051214641103777998997829574783070310720A 1051214641103777998997829574783070310721T -1009100605889114473641721337436356945411G -868669325865826288863968850666726933890T 868669325865826288863968850666726933891A -1128739293953905159053752212089602135770C -904372348674400692731144770624318750000A 904372348674400692731144770624318750001C -423512127105511523198292961472600703381A 423512127105511523198292961472600703380T -398814686466033291716454528284513165680C 398814686466033291716454528284513165681G 685073028142718221665910897308163595470C 1047136890990362613325763310471371171350C -207581983081922000483740505818329984050C 207581983081922000483740505818329984051G -906632730198145210235254509012844392870T -209583089332605534752416642939965330251C 209583089332605534752416642939965330250T -481906282105361328455974181334459260301G 481906282105361328455974181334459260300T 1167096117837016725464259582968713440650C 1861552238003261726711017540124647279120T -2422446792461281396404892430214399444400C -218095554775140017164904926195267303030T 218095554775140017164904926195267303031A -23061978674969323451273664178782970631C 23061978674969323451273664178782970630A 502758979284404504436909191483395114171T -328535453307720028158565232463733889650G 328535453307720028158565232463733889651T -191477417539990671621670477249308645520T 191477417539990671621670477249308645521A 548150034369132110833754120177282227401A 1353001387792150576085368844664633619830G -100291083941116602325645229463764725970A 100291083941116602325645229463764725971C -1582278821316205053674221776174453117531G -1300872480948124691195803080293213564990C -1062115960864385469251138097896774151000T -97945658046437595957458289995464462560A -25042964610544797933383917514041398891T 25042964610544797933383917514041398890A -486109080920105927023147871930502918340C 486109080920105927023147871930502918341A -81824997134054312846568323833759516770C 81824997134054312846568323833759516771A 1097054476762650659869086097141066211821G -1023441491452523262736697689812531865350G 1023441491452523262736697689812531865351G -1034614883653126360836172496125286042841T 1034614883653126360836172496125286042840G -646952956303582702222301249107352386971G 646952956303582702222301249107352386970T 770930509432927940519627878367579756470A -1728234950048029727920537781807860534400T -548890286293075509648226450146520904710A 548890286293075509648226450146520904711G -928003491837279312606735681842749617130A -585053240964167913077215291802987295141G -131593438763499949236639925864431125210A 131593438763499949236639925864431125211C -611791956460322564625482176036538222330G 611791956460322564625482176036538222331C -9311107880703940412491682439416893861C 9311107880703940412491682439416893860G 1398844922317338695256393593706251984561T 1774857471643903173049157531944218939581A -1167353929336954691556694094997009521880G -1095381848373847290719422197025255651570C -49115058078806385513192765107495056251C 49115058078806385513192765107495056250T 52234535194546883503619063087326301540T 491794916112666380154527434243980781891A -1090947783208699828632926470509399564861G 1090947783208699828632926470509399564860C -1871661000785835837159310207489083901730T -1177380398146587473934150784510707484971G -733718493248061332535436444018680227260A 733718493248061332535436444018680227261G 1111506700249495322969561898878808307911C -507195360803681028564556079547092773271C 507195360803681028564556079547092773270C -824730604669881274210906481946379495331A -47406653209051439118199729356781980651G 47406653209051439118199729356781980650G 58204490622504119954041705806349430351A 403893273680079294282986548792576889931C"
    )
    yield from entry.split("\n")


def test_parse_alignments_entry():
    entry = alignment_entry()
    for read_line in entry:
        read_id, edge_ids, is_rc = parse_alignments_entry(read_line, next(entry))
        assert read_id == "S1_4"
        assert edge_ids[0] == "412919857249062717843322281184075888261T"
        assert edge_ids[1] == "1987231515899329249692347480942183202460G"
        assert edge_ids[-1] == "403893273680079294282986548792576889931C"
        assert is_rc[0] is False
        assert is_rc[1] is True
        assert is_rc[-1] is False
